---
import 'mapbox-gl/dist/mapbox-gl.css';

import { type GlobeModel } from '@ts/Models'

interface Props extends GlobeModel {
    accesstoken: string;
}

const { lng, lat, zoom, style, bearing, pitch = 0, accesstoken, light = true, linewidth = 0.1, interactive = false, sec = 8000} = Astro.props;

let figureColor = light ? 'danger' : 'success';

---
<div transition:persist id="map"/>
<div transition:persist id="bg"/>
<mapbox-map
    data-lat={lat}
    data-lng={lng}
    data-zoom={zoom}
    data-style={style}
    data-bearing={bearing}
    data-pitch={pitch}
    data-accesstoken={accesstoken}
    data-figureColor={figureColor}
    data-linewidth={linewidth}
    data-interactive={interactive}
    data-sec={sec}
/>

<script>
    import mapboxgl from "mapbox-gl"

    class MapboxMap extends HTMLElement {
        constructor() {
            super()
            mapboxgl.accessToken = this.dataset.accesstoken
            const map = new mapboxgl.Map({
                container: 'map',
                projection: 'globe',
                center: [Number(this.dataset.lng), Number(this.dataset.lat)],
                interactive: Boolean(this.dataset.interactive),
                bearing: Number(this.dataset.bearing),
                pitch: Number(this.dataset.pitch),
                zoom: Number(this.dataset.zoom)
            })

            map.setStyle(this.dataset.style);

            map.on('renderstart', () => {
                this.removeMB();
            })

            map.on('moveend', () => {
                this.spinGlobe(map);
            });
            
            this.spinGlobe(map);
        }

        removeMB() {
            interface SelectedElement extends Element{
                style: CSSStyleDeclaration;
            }
            let ctrl:SelectedElement = document.querySelector('.mapboxgl-ctrl')
            ctrl.style["display"] = "none";
        }

        spinGlobe(map) {
            let cnt = map.getCenter();
            cnt.lng -= 360 / Number(this.dataset.sec);
            map.easeTo({ center: cnt, duration: 3000, easing: (n) => n });
        }
    } 
    customElements.define("mapbox-map", MapboxMap);
</script>

<style>
    #map {
        filter: saturate(0%);
        height: 100%;
        width: 100vw;
        position: fixed;
        top: 0;
        z-index: -1;
        mix-blend-mode: screen;
    }

    @media (prefers-color-scheme: dark) {
        #map {
            mix-blend-mode: overlay;
        }
    }

    #bg {
        background-color: #990000;
        height: 100%;
        width: 100vw;
        position: fixed;
        top: 0;
        z-index: -2;
    }
</style>